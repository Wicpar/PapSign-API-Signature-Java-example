/*
 * PapSign API
 * The PapSign API
 *
 * OpenAPI spec version: 0.1
 * Contact: support@papsign.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.SignatureSlot;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * PDFSignatureProcessRequestDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-07-27T15:04:00.483Z[GMT]")
public class PDFSignatureProcessRequestDTO {
  @SerializedName("file")
  private Long file = null;

  @SerializedName("keep")
  private Boolean keep = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("signers")
  private List<SignatureSlot> signers = new ArrayList<SignatureSlot>();

  public PDFSignatureProcessRequestDTO file(Long file) {
    this.file = file;
    return this;
  }

   /**
   * Get file
   * minimum: 9223372036854775616
   * maximum: -9223372036854775616
   * @return file
  **/
  @Schema(required = true, description = "")
  public Long getFile() {
    return file;
  }

  public void setFile(Long file) {
    this.file = file;
  }

  public PDFSignatureProcessRequestDTO keep(Boolean keep) {
    this.keep = keep;
    return this;
  }

   /**
   * Get keep
   * @return keep
  **/
  @Schema(required = true, description = "")
  public Boolean isKeep() {
    return keep;
  }

  public void setKeep(Boolean keep) {
    this.keep = keep;
  }

  public PDFSignatureProcessRequestDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PDFSignatureProcessRequestDTO signers(List<SignatureSlot> signers) {
    this.signers = signers;
    return this;
  }

  public PDFSignatureProcessRequestDTO addSignersItem(SignatureSlot signersItem) {
    this.signers.add(signersItem);
    return this;
  }

   /**
   * Get signers
   * @return signers
  **/
  @Schema(required = true, description = "")
  public List<SignatureSlot> getSigners() {
    return signers;
  }

  public void setSigners(List<SignatureSlot> signers) {
    this.signers = signers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PDFSignatureProcessRequestDTO pdFSignatureProcessRequestDTO = (PDFSignatureProcessRequestDTO) o;
    return Objects.equals(this.file, pdFSignatureProcessRequestDTO.file) &&
        Objects.equals(this.keep, pdFSignatureProcessRequestDTO.keep) &&
        Objects.equals(this.name, pdFSignatureProcessRequestDTO.name) &&
        Objects.equals(this.signers, pdFSignatureProcessRequestDTO.signers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(file, keep, name, signers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PDFSignatureProcessRequestDTO {\n");
    
    sb.append("    file: ").append(toIndentedString(file)).append("\n");
    sb.append("    keep: ").append(toIndentedString(keep)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    signers: ").append(toIndentedString(signers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
