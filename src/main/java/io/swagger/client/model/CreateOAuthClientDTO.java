/*
 * PapSign API
 * The PapSign API
 *
 * OpenAPI spec version: 0.1
 * Contact: support@papsign.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.FlowType;
import io.swagger.client.model.OAuthScope;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * CreateOAuthClientDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-07-27T15:04:00.483Z[GMT]")
public class CreateOAuthClientDTO {
  @SerializedName("flows")
  private List<FlowType> flows = new ArrayList<FlowType>();

  @SerializedName("name")
  private String name = null;

  @SerializedName("redirectURIs")
  private List<String> redirectURIs = new ArrayList<String>();

  @SerializedName("scopes")
  private List<OAuthScope> scopes = new ArrayList<OAuthScope>();

  public CreateOAuthClientDTO flows(List<FlowType> flows) {
    this.flows = flows;
    return this;
  }

  public CreateOAuthClientDTO addFlowsItem(FlowType flowsItem) {
    this.flows.add(flowsItem);
    return this;
  }

   /**
   * Get flows
   * @return flows
  **/
  @Schema(required = true, description = "")
  public List<FlowType> getFlows() {
    return flows;
  }

  public void setFlows(List<FlowType> flows) {
    this.flows = flows;
  }

  public CreateOAuthClientDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CreateOAuthClientDTO redirectURIs(List<String> redirectURIs) {
    this.redirectURIs = redirectURIs;
    return this;
  }

  public CreateOAuthClientDTO addRedirectURIsItem(String redirectURIsItem) {
    this.redirectURIs.add(redirectURIsItem);
    return this;
  }

   /**
   * Get redirectURIs
   * @return redirectURIs
  **/
  @Schema(required = true, description = "")
  public List<String> getRedirectURIs() {
    return redirectURIs;
  }

  public void setRedirectURIs(List<String> redirectURIs) {
    this.redirectURIs = redirectURIs;
  }

  public CreateOAuthClientDTO scopes(List<OAuthScope> scopes) {
    this.scopes = scopes;
    return this;
  }

  public CreateOAuthClientDTO addScopesItem(OAuthScope scopesItem) {
    this.scopes.add(scopesItem);
    return this;
  }

   /**
   * Get scopes
   * @return scopes
  **/
  @Schema(required = true, description = "")
  public List<OAuthScope> getScopes() {
    return scopes;
  }

  public void setScopes(List<OAuthScope> scopes) {
    this.scopes = scopes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateOAuthClientDTO createOAuthClientDTO = (CreateOAuthClientDTO) o;
    return Objects.equals(this.flows, createOAuthClientDTO.flows) &&
        Objects.equals(this.name, createOAuthClientDTO.name) &&
        Objects.equals(this.redirectURIs, createOAuthClientDTO.redirectURIs) &&
        Objects.equals(this.scopes, createOAuthClientDTO.scopes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(flows, name, redirectURIs, scopes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateOAuthClientDTO {\n");
    
    sb.append("    flows: ").append(toIndentedString(flows)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    redirectURIs: ").append(toIndentedString(redirectURIs)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
