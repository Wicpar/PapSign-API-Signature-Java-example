/*
 * PapSign API
 * The PapSign API
 *
 * OpenAPI spec version: 0.1
 * Contact: support@papsign.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AccessibleIdentities;
import io.swagger.client.model.EmailInvite;
import io.swagger.client.model.EmailInviteResponse;
import io.swagger.client.model.GroupPermission;
import io.swagger.client.model.PDFSignatureProcessDTO;
import io.swagger.client.model.PDFSignatureProcessRequestDTO;
import io.swagger.client.model.PDFSignatureProcessSignDTO;
import io.swagger.client.model.PDFSignatureProcessesAvailableDTO;
import io.swagger.client.model.PapsignError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SignatureProcessApi {
    private ApiClient apiClient;

    public SignatureProcessApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SignatureProcessApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for v1SignatureProcessPdfGet
     * @param permission The minimal permission of the Signature Process (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1SignatureProcessPdfGetCall(GroupPermission permission, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/signature-process/pdf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "papsign" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1SignatureProcessPdfGetValidateBeforeCall(GroupPermission permission, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = v1SignatureProcessPdfGetCall(permission, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param permission The minimal permission of the Signature Process (optional)
     * @return PDFSignatureProcessesAvailableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PDFSignatureProcessesAvailableDTO v1SignatureProcessPdfGet(GroupPermission permission) throws ApiException {
        ApiResponse<PDFSignatureProcessesAvailableDTO> resp = v1SignatureProcessPdfGetWithHttpInfo(permission);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param permission The minimal permission of the Signature Process (optional)
     * @return ApiResponse&lt;PDFSignatureProcessesAvailableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PDFSignatureProcessesAvailableDTO> v1SignatureProcessPdfGetWithHttpInfo(GroupPermission permission) throws ApiException {
        com.squareup.okhttp.Call call = v1SignatureProcessPdfGetValidateBeforeCall(permission, null, null);
        Type localVarReturnType = new TypeToken<PDFSignatureProcessesAvailableDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param permission The minimal permission of the Signature Process (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1SignatureProcessPdfGetAsync(GroupPermission permission, final ApiCallback<PDFSignatureProcessesAvailableDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1SignatureProcessPdfGetValidateBeforeCall(permission, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PDFSignatureProcessesAvailableDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1SignatureProcessPdfPost
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1SignatureProcessPdfPostCall(PDFSignatureProcessRequestDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/signature-process/pdf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "papsign" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1SignatureProcessPdfPostValidateBeforeCall(PDFSignatureProcessRequestDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = v1SignatureProcessPdfPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param body  (optional)
     * @return PDFSignatureProcessDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PDFSignatureProcessDTO v1SignatureProcessPdfPost(PDFSignatureProcessRequestDTO body) throws ApiException {
        ApiResponse<PDFSignatureProcessDTO> resp = v1SignatureProcessPdfPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;PDFSignatureProcessDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PDFSignatureProcessDTO> v1SignatureProcessPdfPostWithHttpInfo(PDFSignatureProcessRequestDTO body) throws ApiException {
        com.squareup.okhttp.Call call = v1SignatureProcessPdfPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<PDFSignatureProcessDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1SignatureProcessPdfPostAsync(PDFSignatureProcessRequestDTO body, final ApiCallback<PDFSignatureProcessDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1SignatureProcessPdfPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PDFSignatureProcessDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1SignatureProcessPdfProcessIDDelete
     * @param processID The id of the signature process (required)
     * @param revertFile If this should revert the operation, will ignore keep if true and will revert the file. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1SignatureProcessPdfProcessIDDeleteCall(Long processID, Boolean revertFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/signature-process/pdf/{processID}"
            .replaceAll("\\{" + "processID" + "\\}", apiClient.escapeString(processID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (revertFile != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("revertFile", revertFile));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "papsign" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1SignatureProcessPdfProcessIDDeleteValidateBeforeCall(Long processID, Boolean revertFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'processID' is set
        if (processID == null) {
            throw new ApiException("Missing the required parameter 'processID' when calling v1SignatureProcessPdfProcessIDDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = v1SignatureProcessPdfProcessIDDeleteCall(processID, revertFile, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param processID The id of the signature process (required)
     * @param revertFile If this should revert the operation, will ignore keep if true and will revert the file. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1SignatureProcessPdfProcessIDDelete(Long processID, Boolean revertFile) throws ApiException {
        v1SignatureProcessPdfProcessIDDeleteWithHttpInfo(processID, revertFile);
    }

    /**
     * 
     * 
     * @param processID The id of the signature process (required)
     * @param revertFile If this should revert the operation, will ignore keep if true and will revert the file. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1SignatureProcessPdfProcessIDDeleteWithHttpInfo(Long processID, Boolean revertFile) throws ApiException {
        com.squareup.okhttp.Call call = v1SignatureProcessPdfProcessIDDeleteValidateBeforeCall(processID, revertFile, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param processID The id of the signature process (required)
     * @param revertFile If this should revert the operation, will ignore keep if true and will revert the file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1SignatureProcessPdfProcessIDDeleteAsync(Long processID, Boolean revertFile, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1SignatureProcessPdfProcessIDDeleteValidateBeforeCall(processID, revertFile, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1SignatureProcessPdfProcessIDGet
     * @param processID The id of the signature process (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1SignatureProcessPdfProcessIDGetCall(Long processID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/signature-process/pdf/{processID}"
            .replaceAll("\\{" + "processID" + "\\}", apiClient.escapeString(processID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "papsign" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1SignatureProcessPdfProcessIDGetValidateBeforeCall(Long processID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'processID' is set
        if (processID == null) {
            throw new ApiException("Missing the required parameter 'processID' when calling v1SignatureProcessPdfProcessIDGet(Async)");
        }
        
        com.squareup.okhttp.Call call = v1SignatureProcessPdfProcessIDGetCall(processID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param processID The id of the signature process (required)
     * @return PDFSignatureProcessDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PDFSignatureProcessDTO v1SignatureProcessPdfProcessIDGet(Long processID) throws ApiException {
        ApiResponse<PDFSignatureProcessDTO> resp = v1SignatureProcessPdfProcessIDGetWithHttpInfo(processID);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param processID The id of the signature process (required)
     * @return ApiResponse&lt;PDFSignatureProcessDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PDFSignatureProcessDTO> v1SignatureProcessPdfProcessIDGetWithHttpInfo(Long processID) throws ApiException {
        com.squareup.okhttp.Call call = v1SignatureProcessPdfProcessIDGetValidateBeforeCall(processID, null, null);
        Type localVarReturnType = new TypeToken<PDFSignatureProcessDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param processID The id of the signature process (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1SignatureProcessPdfProcessIDGetAsync(Long processID, final ApiCallback<PDFSignatureProcessDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1SignatureProcessPdfProcessIDGetValidateBeforeCall(processID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PDFSignatureProcessDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1SignatureProcessPdfProcessIDIdentitiesGet
     * @param processID The id of the signature process (required)
     * @param permission The minimal permission of the Signature Process (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1SignatureProcessPdfProcessIDIdentitiesGetCall(Long processID, GroupPermission permission, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/signature-process/pdf/{processID}/identities"
            .replaceAll("\\{" + "processID" + "\\}", apiClient.escapeString(processID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "papsign" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1SignatureProcessPdfProcessIDIdentitiesGetValidateBeforeCall(Long processID, GroupPermission permission, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'processID' is set
        if (processID == null) {
            throw new ApiException("Missing the required parameter 'processID' when calling v1SignatureProcessPdfProcessIDIdentitiesGet(Async)");
        }
        
        com.squareup.okhttp.Call call = v1SignatureProcessPdfProcessIDIdentitiesGetCall(processID, permission, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param processID The id of the signature process (required)
     * @param permission The minimal permission of the Signature Process (optional)
     * @return AccessibleIdentities
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccessibleIdentities v1SignatureProcessPdfProcessIDIdentitiesGet(Long processID, GroupPermission permission) throws ApiException {
        ApiResponse<AccessibleIdentities> resp = v1SignatureProcessPdfProcessIDIdentitiesGetWithHttpInfo(processID, permission);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param processID The id of the signature process (required)
     * @param permission The minimal permission of the Signature Process (optional)
     * @return ApiResponse&lt;AccessibleIdentities&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccessibleIdentities> v1SignatureProcessPdfProcessIDIdentitiesGetWithHttpInfo(Long processID, GroupPermission permission) throws ApiException {
        com.squareup.okhttp.Call call = v1SignatureProcessPdfProcessIDIdentitiesGetValidateBeforeCall(processID, permission, null, null);
        Type localVarReturnType = new TypeToken<AccessibleIdentities>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param processID The id of the signature process (required)
     * @param permission The minimal permission of the Signature Process (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1SignatureProcessPdfProcessIDIdentitiesGetAsync(Long processID, GroupPermission permission, final ApiCallback<AccessibleIdentities> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1SignatureProcessPdfProcessIDIdentitiesGetValidateBeforeCall(processID, permission, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccessibleIdentities>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1SignatureProcessPdfProcessIDInvitePost
     * @param processID The id of the signature process (required)
     * @param body Requests an invitation email to sign a signature process (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1SignatureProcessPdfProcessIDInvitePostCall(Long processID, EmailInvite body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/signature-process/pdf/{processID}/invite"
            .replaceAll("\\{" + "processID" + "\\}", apiClient.escapeString(processID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "papsign" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1SignatureProcessPdfProcessIDInvitePostValidateBeforeCall(Long processID, EmailInvite body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'processID' is set
        if (processID == null) {
            throw new ApiException("Missing the required parameter 'processID' when calling v1SignatureProcessPdfProcessIDInvitePost(Async)");
        }
        
        com.squareup.okhttp.Call call = v1SignatureProcessPdfProcessIDInvitePostCall(processID, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param processID The id of the signature process (required)
     * @param body Requests an invitation email to sign a signature process (optional)
     * @return EmailInviteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailInviteResponse v1SignatureProcessPdfProcessIDInvitePost(Long processID, EmailInvite body) throws ApiException {
        ApiResponse<EmailInviteResponse> resp = v1SignatureProcessPdfProcessIDInvitePostWithHttpInfo(processID, body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param processID The id of the signature process (required)
     * @param body Requests an invitation email to sign a signature process (optional)
     * @return ApiResponse&lt;EmailInviteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailInviteResponse> v1SignatureProcessPdfProcessIDInvitePostWithHttpInfo(Long processID, EmailInvite body) throws ApiException {
        com.squareup.okhttp.Call call = v1SignatureProcessPdfProcessIDInvitePostValidateBeforeCall(processID, body, null, null);
        Type localVarReturnType = new TypeToken<EmailInviteResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param processID The id of the signature process (required)
     * @param body Requests an invitation email to sign a signature process (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1SignatureProcessPdfProcessIDInvitePostAsync(Long processID, EmailInvite body, final ApiCallback<EmailInviteResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1SignatureProcessPdfProcessIDInvitePostValidateBeforeCall(processID, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailInviteResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1SignatureSignPdfPut
     * @param body Sign all assigned slots in document, or sign a single unassigned one. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1SignatureSignPdfPutCall(PDFSignatureProcessSignDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/signature/sign/pdf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "papsign" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1SignatureSignPdfPutValidateBeforeCall(PDFSignatureProcessSignDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = v1SignatureSignPdfPutCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param body Sign all assigned slots in document, or sign a single unassigned one. (optional)
     * @return PDFSignatureProcessDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PDFSignatureProcessDTO v1SignatureSignPdfPut(PDFSignatureProcessSignDTO body) throws ApiException {
        ApiResponse<PDFSignatureProcessDTO> resp = v1SignatureSignPdfPutWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body Sign all assigned slots in document, or sign a single unassigned one. (optional)
     * @return ApiResponse&lt;PDFSignatureProcessDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PDFSignatureProcessDTO> v1SignatureSignPdfPutWithHttpInfo(PDFSignatureProcessSignDTO body) throws ApiException {
        com.squareup.okhttp.Call call = v1SignatureSignPdfPutValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<PDFSignatureProcessDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body Sign all assigned slots in document, or sign a single unassigned one. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1SignatureSignPdfPutAsync(PDFSignatureProcessSignDTO body, final ApiCallback<PDFSignatureProcessDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1SignatureSignPdfPutValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PDFSignatureProcessDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
